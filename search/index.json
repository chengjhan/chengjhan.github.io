[{"content":"\n在本機環境開發的網頁應用程式或服務可能初期需要給客戶測試，但在開發階段可能還沒建置好測試環境。除了內網環境之外，可以利用 ngrok 的服務，將 localhost 臨時轉成可以讓外網連線的網址，即可使用外網讓客戶連線測試使用。本篇會示範在 Windows 環境下安裝的 Jenkins 服務，利用 ngrok 產生可以讓外網連線的網址並連線使用。\n下載 ngrok 至 ngrok 官網免費註冊一個帳號。\n註冊後即可下載 ngrok。\nngrok 為一個壓縮檔，解壓縮後放置於欲放置的路徑，本篇放置於 D:\\ 目錄下。\n註冊 Token 點選「Your Authtoken」取得 Token。\n利用指令將 Token 註冊到本機。\ncd /d D:\\ngrok-v3-stable-windows-amd64 ngrok config add-authtoken \u0026lt;Token\u0026gt; 取得外網網址 啟動本機的 Jenkins 服務。\n利用指令將「localhost:18080」轉成外網網址。\ncd /d D:\\ngrok-v3-stable-windows-amd64 ngrok http localhost:18080 利用 ngrok 產生的網址「https://778e-1-160-15-48.ngrok-free.app」，即可連線。\n點選「Visit Site」，即可訪問到本機安裝的 Jenkins。\n最後檢查 Console，會顯示有成功請求到本機的服務。\n","date":"2023-04-27T00:00:00Z","permalink":"https://chengjhan.github.io/p/%E5%88%A9%E7%94%A8-ngrok-%E8%AE%93%E5%A4%96%E7%B6%B2%E9%80%A3%E7%B7%9A%E5%88%B0%E6%9C%AC%E6%A9%9F%E7%9A%84-localhost-%E4%BC%BA%E6%9C%8D%E5%99%A8/","title":"利用 ngrok 讓外網連線到本機的 localhost 伺服器"},{"content":"\nWildFly 原名為 JBoss Application Server (JBoss AS)，是一個 Java 的應用程式伺服器（中介軟體）。Red Hat 公司收購 JBoss 後，將其改名為 WildFly。而 JBoss Enterprise Application Platform (JBoss EAP) 是基於 WildFly 開發的企業級商用版本，因此 WildFly Maven Plugin 也適用於 JBoss EAP。本篇將介紹如何透過 WildFly Maven Plugin 部署應用程式到 JBoss EAP。\n設定 pom.xml 檔 在 Maven 專案的 pom.xml 檔添加以下設定：\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; ... \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.wildfly.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;wildfly-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.2.Final\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;install\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;deploy\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;filename\u0026gt;demo-0.0.1-SNAPSHOT.war\u0026lt;/filename\u0026gt; \u0026lt;hostname\u0026gt;127.0.0.1\u0026lt;/hostname\u0026gt; \u0026lt;port\u0026gt;9990\u0026lt;/port\u0026gt; \u0026lt;username\u0026gt;jboss\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;force\u0026gt;true\u0026lt;/force\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; Note:\n\u0026lt;execution\u0026gt;：為將 \u0026lt;goal\u0026gt; 標籤的 deploy 綁定到 Maven 的 install 階段，因此只需要執行 mvn install 即可，指令可不加 wildfly:deploy。 \u0026lt;filename\u0026gt;：為欲部署的 war 檔名稱。 \u0026lt;hostname\u0026gt;：為伺服器的 IP 位址。 \u0026lt;port\u0026gt;：為 Web Console 的 port，預設為 9990。 \u0026lt;username\u0026gt;：為 Web Console 的帳號。 \u0026lt;password\u0026gt;：為 Web Console 的密碼。 \u0026lt;force\u0026gt;：若為 true，則已部署同名的 war 檔會強制覆蓋。 執行部署 mvn clean install wildfly:deploy 或\nmvn clean install 另外，也可將 \u0026lt;configuration\u0026gt; 標籤的設定加在指令的參數，即可不寫 \u0026lt;configuration\u0026gt; 標籤，如下：\n\u0026lt;configuration\u0026gt; \u0026lt;filename\u0026gt;demo-0.0.1-SNAPSHOT.war\u0026lt;/filename\u0026gt; \u0026lt;hostname\u0026gt;127.0.0.1\u0026lt;/hostname\u0026gt; \u0026lt;port\u0026gt;9990\u0026lt;/port\u0026gt; \u0026lt;username\u0026gt;jboss\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;force\u0026gt;true\u0026lt;/force\u0026gt; \u0026lt;/configuration\u0026gt; 不寫以上設定，將設定寫在指令，如下：\nmvn clean install wildfly:deploy -Dwildfly.deployment.name=demo-0.0.1-SNAPSHOT.war -Dwildfly.hostname=127.0.0.1 -Dwildfly.port=9990 -Dwildfly.username=jboss -Dwildfly.password=P@ssw0rd -Ddeploy.force=true 執行去部署 執行 wildfly:undeploy 即可去部署，如下：\nmvn wildfly:undeploy 參考資料 WildFly Maven Plugin (wildfly-maven-plugin) 如何將 Spring Boot 應用程式部署到 WildFly 應用程式伺服器 Deploying applications to WildFly Server using WildFly Maven plugin ","date":"2023-04-20T00:00:00Z","permalink":"https://chengjhan.github.io/p/wildfly-maven-plugin-%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2/","title":"WildFly Maven Plugin 自動部署"},{"content":"\nWebLogic 提供了利用 Maven Plug-In 控制 WebLogic 的各種功能。本篇會介紹在 Windows 的環境下如何利用 Maven Plug-In 執行 WebLogic 應用程式的部署及去部署，可以更快速地更新應用程式。若結合 Jenkins、Azure DevOps Server 等 CI/CD 工具更可以達到自動化部署的功能。\n安裝 WebLogic Maven Plug-In 安裝 WebLogic Maven Plug-In 前必須先安裝 Maven，可參考這篇。\nNote:\n本篇 ORACLE_HOME=D:\\Oracle\\Middleware\\Oracle_Home\n開啟 cmd 到指定目錄 cd \u0026lt;ORACLE_HOME\u0026gt;\\oracle_common\\plugins\\maven\\com\\oracle\\maven\\oracle-maven-sync\\14.1.1 執行 install:install-file 安裝 oracle-maven-sync-14.1.1.jar mvn install:install-file -DpomFile=oracle-maven-sync-14.1.1.pom -Dfile=oracle-maven-sync-14.1.1.jar 可以看到 oracle-maven-sync-14.1.1-0-0.jar 已安裝到伺服器的 Maven Local Repository，如下圖：\n執行 push mvn com.oracle.maven:oracle-maven-sync:push -DoracleHome=D:\\Oracle\\Middleware\\Oracle_Home 執行完成後會從 Maven Central Repository 下載必要的套件到伺服器的 Maven Local Repository，如下圖：\n複製伺服器的 Maven Local Repository 到客戶端本機 最後將上圖伺服器的 Maven Local Repository 複製到客戶端本機的 Maven Local Repository，以利用客戶端本機的 Maven Plug-In 執行 WebLogic 的部署及去部署。\n設定部署應用程式的 pom.xml 檔並執行部署 設定部署應用程式的 pom.xml 檔，檔名命名為 deploy-pom.xml。\n\u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;demo\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;name\u0026gt;demo\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.apache.org\u0026lt;/url\u0026gt; \u0026lt;build\u0026gt; \u0026lt;finalName\u0026gt;demo\u0026lt;/finalName\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.oracle.weblogic\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;weblogic-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;14.1.1-0-0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;adminurl\u0026gt;t3://localhost:7001\u0026lt;/adminurl\u0026gt; \u0026lt;user\u0026gt;weblogic\u0026lt;/user\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;upload\u0026gt;true\u0026lt;/upload\u0026gt; \u0026lt;remote\u0026gt;false\u0026lt;/remote\u0026gt; \u0026lt;targets\u0026gt;ManagedServer_1\u0026lt;/targets\u0026gt; \u0026lt;verbose\u0026gt;true\u0026lt;/verbose\u0026gt; \u0026lt;source\u0026gt;demo-0.0.1-SNAPSHOT.war\u0026lt;/source\u0026gt; \u0026lt;name\u0026gt;demo-0.0.1-SNAPSHOT\u0026lt;/name\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;install\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;deploy\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; Note:\n\u0026lt;adminurl\u0026gt;：為 WebLogic 的 Web Console URL。 \u0026lt;user\u0026gt;：為 Web Console 的帳號。 \u0026lt;password\u0026gt;：為 Web Console 的密碼。 \u0026lt;targets\u0026gt;：為部署至 Managed Server 的名稱。 \u0026lt;source\u0026gt;：為 war 檔的路徑。 \u0026lt;execution\u0026gt;：為將 \u0026lt;goal\u0026gt; 標籤的 deploy 綁定到 Maven 的 install 階段，因此只需要執行 mvn install 即可。 將 deploy-pom.xml 與欲部署的 war 檔放置於同一層目錄，如下圖：\nNote:\n若不同層目錄，則必須修改 \u0026lt;source\u0026gt; 標籤的路徑。\n執行部署：\nmvn install -f deploy-pom.xml 完成應用程式的部署。\n設定去部署應用程式的 pom.xml 檔並執行去部署 設定去部署應用程式的 pom.xml 檔，檔名命名為 undeploy-pom.xml。\n\u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;demo\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;name\u0026gt;demo\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.apache.org\u0026lt;/url\u0026gt; \u0026lt;build\u0026gt; \u0026lt;finalName\u0026gt;demo\u0026lt;/finalName\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.oracle.weblogic\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;weblogic-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;14.1.1-0-0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;adminurl\u0026gt;t3://localhost:7001\u0026lt;/adminurl\u0026gt; \u0026lt;user\u0026gt;weblogic\u0026lt;/user\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;remote\u0026gt;false\u0026lt;/remote\u0026gt; \u0026lt;targets\u0026gt;ManagedServer_1\u0026lt;/targets\u0026gt; \u0026lt;verbose\u0026gt;true\u0026lt;/verbose\u0026gt; \u0026lt;name\u0026gt;demo-0.0.1-SNAPSHOT\u0026lt;/name\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;phase\u0026gt;install\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;undeploy\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; Note:\n\u0026lt;adminurl\u0026gt;：為 WebLogic 的 Web Console URL。 \u0026lt;user\u0026gt;：為 Web Console 的帳號。 \u0026lt;password\u0026gt;：為 Web Console 的密碼。 \u0026lt;targets\u0026gt;：為去部署 Managed Server 的名稱。 \u0026lt;execution\u0026gt;：為將 \u0026lt;goal\u0026gt; 標籤的 undeploy 綁定到 Maven 的 install 階段，因此只需要執行 mvn install 即可。 將 undeploy-pom.xml 放置於同一層目錄，如下圖：\n執行去部署：\nmvn install -f undeploy-pom.xml 完成應用程式的去部署。\n參考資料 3 Using the WebLogic Maven Plug-In ","date":"2023-04-18T00:00:00Z","permalink":"https://chengjhan.github.io/p/weblogic-maven-plug-in-%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2/","title":"WebLogic Maven Plug-In 自動部署"},{"content":"\n上篇介紹了如何架設 Nexus Repository 及如何設定開發環境連線到 Nexus Repository 下載外部的套件。本篇將介紹如何將自行開發的套件上傳到 Nexus Repository。\n情境一：自行開發的套件 在 Maven 專案的 pom.xml 添加設定：\n\u0026lt;distributionManagement\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;nexus-snapshots\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Nexus-maven-snapshots\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://localhost:8081/repository/maven-snapshots/\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/distributionManagement\u0026gt; Note:\n其中 \u0026lt;url\u0026gt; 標籤為「http://localhost:8081/repository/maven-snapshots/」，會上傳到 Nexus Repository 的 「maven-snapshots」repository，表示套件為「SNAPSHOT」，代表還在開發尚未穩定的版本；另外還有「http://localhost:8081/repository/maven-releases/」，會上傳到 Nexus Repository 的 「maven-releases」repository，表示套件為「RELEASE」的版本，代表已穩定的版本。\n在 Maven settings.xml 添加帳號、密碼：\n\u0026lt;servers\u0026gt; ... \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;nexus-releases\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;users\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;nexus-snapshots\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;users\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; ... \u0026lt;/servers\u0026gt; Note:\n其中 \u0026lt;id\u0026gt; 標籤須對應 pom.xml 檔 \u0026lt;repository\u0026gt; 的 \u0026lt;id\u0026gt; 標籤。\nMaven settings.xml 的設定範例如下：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;settings xmlns=\u0026#34;http://maven.apache.org/SETTINGS/1.2.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd\u0026#34;\u0026gt; \u0026lt;servers\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;users\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;nexus-releases\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;users\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;nexus-snapshots\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;users\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt; \u0026lt;mirrors\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Nexus\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://localhost:8081/repository/maven-public/\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Nexus\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://localhost:8081/repository/maven-public/\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;updatePolicy\u0026gt;always\u0026lt;/updatePolicy\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; \u0026lt;pluginRepositories\u0026gt; \u0026lt;pluginRepository\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Nexus\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://localhost:8081/repository/maven-public/\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;updatePolicy\u0026gt;always\u0026lt;/updatePolicy\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/pluginRepository\u0026gt; \u0026lt;/pluginRepositories\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; \u0026lt;activeProfiles\u0026gt; \u0026lt;activeProfile\u0026gt;nexus\u0026lt;/activeProfile\u0026gt; \u0026lt;/activeProfiles\u0026gt; \u0026lt;/settings\u0026gt; 接著執行 Maven 打包，打包後會自動上傳至 Nexus Repository，Maven 指令如下：\nmvn clean deploy 檢視 Nexus Repository，確實已上傳自行開發的 jar 檔。\n情境二：已打包為 jar 檔的套件 利用 deploy:deploy-file 指令將 jar 檔的 Maven 座標上傳至 Nexus Repository。原理類似 install:install-file 指令安裝 jar 檔到 Maven Local Repository，可參考這篇。\n指令如下：\nmvn deploy:deploy-file -DgroupId=\u0026lt;group-id\u0026gt; -DartifactId=\u0026lt;artifact-id\u0026gt; -Dversion=\u0026lt;version\u0026gt; -Dpackaging=\u0026lt;type-of-packaging\u0026gt; -DgeneratePom=\u0026lt;generic-pom\u0026gt; -Dfile=\u0026lt;path-to-file\u0026gt; -DrepositoryId=\u0026lt;id-to-map-on-server-section-of-settings.xml\u0026gt; -Durl=\u0026lt;url-of-the-repository-to-deploy\u0026gt; 以 demo-0.0.1-SNAPSHOT.jar 為例：\nmvn deploy:deploy-file -s D:\\apache-maven-3.8.1\\conf\\settings-nexus.xml -DgroupId=com.example -DartifactId=demo -Dversion=0.0.1-SNAPSHOT -Dpackaging=jar -DgeneratePom=true -Dfile=C:\\Users\\chengjhan\\Desktop\\demo-0.0.1-SNAPSHOT.jar -DrepositoryId=nexus-snapshots -Durl=http://localhost:8081/repository/maven-snapshots/ 檢視 Nexus Repository，確實已上傳 jar 檔。\n","date":"2023-04-13T00:00:00Z","permalink":"https://chengjhan.github.io/p/%E9%83%A8%E7%BD%B2%E5%A5%97%E4%BB%B6%E8%87%B3-nexus-repository/","title":"部署套件至 Nexus Repository"},{"content":"\n公司可能因為防火牆政策擋住了 Maven Central Repository，導致開發者下載不到所需要的套件，或公司有自行開發內部的套件供團隊使用。因此可以藉由架設一個公司內部使用的 Maven Central Repository 幫助下載外部的套件外，也可以自行上傳公司內部開發的套件供團隊使用。而本篇會利用 Nexus Repository 作為公司內部的 Maven Central Repository，在 Windows 的環境下從如何架設 Nexus Repository，到如何設定環境連線到自行架設的 Nexus Repository。\n安裝 Nexus Repository 至 Sonatype 官方網站下載 Nexus Repository，下載後會是一個 zip 壓縮檔，本篇解壓縮至 D:\\ 下。\n以系統管理員開啟 cmd，利用指令安裝。會自動註冊一個 Nexus Repository，預設會建立名為 nexus 的服務，指令如下：\ncd /d D:\\nexus-3.50.0-01-win64\\nexus-3.50.0-01\\bin nexus /install 接著啟動 Nexus Repository，指令如下：\nnexus /start 啟動後以瀏覽器連線至 http://localhost:8081/ 即可進入 Web Console。\n點擊右上角 Sign in 開啟登入對話框，設定密碼並登入。\n帳號為 admin，初始密碼位於 D:\\nexus-3.50.0-01-win64\\sonatype-work\\nexus3\\admin.password。\n依照提示重新設定密碼即可。\n建立使用者帳號 上一章節的 admin 帳號通常是管理者管理 Nexus Repository 使用，這邊建議建立一個使用者帳號給專案團隊使用。\n首先先建立一個使用者群組：\n至「Roles」\u0026gt;「Create Role」建立使用者群組。\nType 選擇「Nexus role」，並自行命名一個 Role ID 及 Role Name。\n加入角色權限：\n因本篇要使用 Maven，所以加入 nx-repository-view-maven2-*-* 的權限。\n完成。\n接著建立一個使用者帳號：\n至「Users」\u0026gt;「Create local user」建立使用者帳號。\n自訂帳號名稱及密碼。\n將上面建立的 Role ID，賦予給這個使用者帳號，如下圖：\n完成。\n設定 Nexus Repository 連線至 Maven Central Repository 架設好 Nexus Repository 後，需要設定連線到 Maven Central Repository，以便讓 Nexus Repository 代替我們下載需要的套件。所以 Nexus Repository 的角色會是一個中繼站，會存放曾經下載過的套件。\n至「Repositories」\u0026gt;「maven-central」設定連線：\n設定 Maven Central Repository 的 URL，為「https://repo1.maven.org/maven2/」，通常預設已直接設定。\nNote:\nNexus Repository 的主機需要能夠連線至 Maven Central Repository，公司的防火牆政策需要開啟對「https://repo1.maven.org/maven2/」的阻擋。若要查詢 https://repo1.maven.org/maven2/ 的 IP，可利用 Web iP Lookup 查詢。\n設定 Maven 專案連線至 Nexus Repository 完成 Nexus Repository 的架設及所有設定後，在使用者端需要將專案連線到 Nexus Repository。這個設定可以在 Maven 專案的 pom.xml 檔或是 Maven 的 settings.xml 檔，這邊介紹利用 settings.xml 檔做設定，這樣其它的專案都可以共享這個設定。\n若是使用 Eclipse 開發可以利用內建的 Maven 設定介面指定 settings.xml 檔路徑。\nsettings.xml 設定為：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;settings xmlns=\u0026#34;http://maven.apache.org/SETTINGS/1.2.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd\u0026#34;\u0026gt; \u0026lt;servers\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;users\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;P@ssw0rd\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt; \u0026lt;mirrors\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Nexus\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://localhost:8081/repository/maven-public/\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Nexus\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://localhost:8081/repository/maven-public/\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;updatePolicy\u0026gt;always\u0026lt;/updatePolicy\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; \u0026lt;pluginRepositories\u0026gt; \u0026lt;pluginRepository\u0026gt; \u0026lt;id\u0026gt;nexus\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Nexus\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://localhost:8081/repository/maven-public/\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt; \u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt; \u0026lt;updatePolicy\u0026gt;always\u0026lt;/updatePolicy\u0026gt; \u0026lt;/snapshots\u0026gt; \u0026lt;/pluginRepository\u0026gt; \u0026lt;/pluginRepositories\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; \u0026lt;activeProfiles\u0026gt; \u0026lt;activeProfile\u0026gt;nexus\u0026lt;/activeProfile\u0026gt; \u0026lt;/activeProfiles\u0026gt; \u0026lt;/settings\u0026gt; 以下將說明各個設定的目的：\n\u0026lt;server\u0026gt; 標籤指定使用者帳號、密碼。\n\u0026lt;mirror\u0026gt; 標籤指定 Nexus Repository 的 URL，其中必須填 maven-public 這個 Repository 的 URL。讓 Maven 只使用 Nexus Repository，不會去連線到 Maven Central Repository，如下圖：\n\u0026lt;profile\u0026gt; 標籤指定一個 id 為 nexus 的 profile，同時也指定 Nexus Repository 的 URL。\n\u0026lt;activeProfile\u0026gt; 標籤為啟用 nexus 這個 id 的 profile。\n測試 在 Maven 專案的 pom.xml 添加一個 gson 的 dependency，如下圖：\n存檔後檢視 Nexus Repository 是否有下載到套件，如下圖：\n結果確實是透過自己建的 Nexus Repository 下載到 gson 套件，專案再透過 Nexus Repository 將套件下載到開發者的本機。\n","date":"2023-04-11T00:00:00Z","permalink":"https://chengjhan.github.io/p/%E5%BB%BA%E7%AB%8B%E7%A7%81%E6%9C%89%E7%9A%84-nexus-repository/","title":"建立私有的 Nexus Repository"},{"content":"\n上篇介紹了 WLST 命令列的基本用法，本篇將介紹使用 .py 檔的方式，將執行的命令寫成 .py 檔，利用遠端的方式更自動化地管理 WebLogic。\n啟動 Managed Server 編輯 .py 檔，檔名命名為 startManagedServer.py，放置於 \u0026lt;Oracle_Home\u0026gt;\\user_projects\\domains\\base_domain 下，檔案內容如下：\nconnect(\u0026#39;weblogic\u0026#39;, \u0026#39;P@ssw0rd\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) # 連線 WLST start(\u0026#39;ManagedServer_1\u0026#39;, \u0026#39;Server\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) # 啟動 Managed Server exit() # 退出 WLST 可利用遠端電腦執行此檔案達成啟動 Managed Server，指令如下：\nWindows\ncd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain .\\bin\\setDomainEnv.cmd java weblogic.WLST startManagedServer.py 或單行命令：\ncd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain \u0026amp;\u0026amp; .\\bin\\setDomainEnv.cmd \u0026amp;\u0026amp; java weblogic.WLST startManagedServer.py 結果：\nLinux\ncd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin . ./setDomainEnv.sh java weblogic.WLST startManagedServer.py 或單行命令：\ncd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin \u0026amp;\u0026amp; . ./setDomainEnv.sh \u0026amp;\u0026amp; java weblogic.WLST startManagedServer.py 關閉 Managed Server 編輯 .py 檔，檔名命名為 stopManagedServer.py，放置於 \u0026lt;Oracle_Home\u0026gt;\\user_projects\\domains\\base_domain 下，檔案內容如下：\nconnect(\u0026#39;weblogic\u0026#39;, \u0026#39;P@ssw0rd\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) # 連線 WLST shutdown(\u0026#39;ManagedServer_1\u0026#39;, \u0026#39;Server\u0026#39;, ignoreSessions=\u0026#39;true\u0026#39;, force=\u0026#39;true\u0026#39;) # 關閉 Managed Server exit() # 退出 WLST 可利用遠端電腦執行此檔案達成關閉 Managed Server，指令如下：\nWindows\ncd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain .\\bin\\setDomainEnv.cmd java weblogic.WLST stopManagedServer.py 或單行命令：\ncd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain \u0026amp;\u0026amp; .\\bin\\setDomainEnv.cmd \u0026amp;\u0026amp; java weblogic.WLST stopManagedServer.py 結果：\nLinux\ncd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin . ./setDomainEnv.sh java weblogic.WLST stopManagedServer.py 或單行命令：\ncd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin \u0026amp;\u0026amp; . ./setDomainEnv.sh \u0026amp;\u0026amp; java weblogic.WLST stopManagedServer.py 檢查伺服器狀態 編輯 .py 檔，檔名命名為 checkServersState.py，放置於 \u0026lt;Oracle_Home\u0026gt;\\user_projects\\domains\\base_domain 下，檔案內容如下：\nconnect(\u0026#39;weblogic\u0026#39;, \u0026#39;P@ssw0rd\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) # 連線 WLST serverList = ls(\u0026#39;Servers\u0026#39;, returnMap=\u0026#39;true\u0026#39;) # 列出所有伺服器 for server in serverList: state(server, \u0026#39;Server\u0026#39;) # 顯示伺服器狀態 exit() # 退出 WLST 可利用遠端電腦執行此檔案達成檢查伺服器狀態，指令如下：\nWindows\ncd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain .\\bin\\setDomainEnv.cmd java weblogic.WLST checkServersState.py 或單行命令：\ncd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain \u0026amp;\u0026amp; .\\bin\\setDomainEnv.cmd \u0026amp;\u0026amp; java weblogic.WLST checkServersState.py Linux\ncd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin . ./setDomainEnv.sh java weblogic.WLST checkServersState.py 或單行命令：\ncd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin \u0026amp;\u0026amp; . ./setDomainEnv.sh \u0026amp;\u0026amp; java weblogic.WLST checkServersState.py 參考資料 Error: Could not find or load main class weblogic.security.Encrypt Jython WLST using python threading module (Weblogic 10) ","date":"2023-04-09T00:00:00Z","permalink":"https://chengjhan.github.io/p/%E5%88%A9%E7%94%A8-wlst-weblogic-scripting-tool-%E7%AE%A1%E7%90%86-weblogic-%E4%B8%8B/","title":"利用 WLST (WebLogic Scripting Tool) 管理 WebLogic (下)"},{"content":"\nWLST 是一個命令列腳本介面 (command-line scripting interface)，可以透過 WLST 執行 WebLogic 的遠端管理。WLST 是基於 Jython (Java scripting interpreter) 的語法與執行環境。本篇將以 Windows 下的環境介紹基本的 WLST 操作方法。\n啟動 WLST cd \u0026lt;Oracle_Home\u0026gt;\\oracle_common\\common\\bin .\\wlst.cmd 連線 WLST 利用 Jython 語法呼叫 connect() 方法，並將 WebLogic 管理員使用者帳號、密碼、Admin Console URL 代入作為參數。\nconnect(\u0026#39;Username\u0026#39;, \u0026#39;Password\u0026#39;, \u0026#39;Admin Console URL\u0026#39;) 例如：\nconnect(\u0026#39;weblogic\u0026#39;, \u0026#39;P@ssw0rd\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) 啟動 Managed Server 利用 Jython 語法呼叫 start() 方法，並將 Managed Server 的名稱、Admin Console URL 代入作為參數。\nstart(\u0026#39;Managed Server Name\u0026#39;, \u0026#39;Server\u0026#39;, \u0026#39;Admin Console URL\u0026#39;) Info:\n第二個參數中，若為單一伺服器則為 Server；若為叢集伺服器則為 Cluster（叢集伺服器可不需 Admin Console URL 參數）。\n例如：\nstart(\u0026#39;ManagedServer_1\u0026#39;, \u0026#39;Server\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) 關閉 Managed Server 利用 Jython 語法呼叫 shutdown() 方法，並將 Managed Server 的名稱代入作為參數。\nshutdown(\u0026#39;Managed Server Name\u0026#39;, \u0026#39;Server\u0026#39;, ignoreSessions=\u0026#39;true\u0026#39;, force=\u0026#39;true\u0026#39;) Info:\n第二個參數中，若為單一伺服器則為 Server；若為叢集伺服器則為 Cluster。\n例如：\nshutdown(\u0026#39;ManagedServer_1\u0026#39;, \u0026#39;Server\u0026#39;, ignoreSessions=\u0026#39;true\u0026#39;, force=\u0026#39;true\u0026#39;) 檢查伺服器狀態 x = ls(\u0026#39;Servers\u0026#39;, returnMap=\u0026#39;true\u0026#39;) # 列出含有 Server 字串的伺服器 for i in x: state(i, \u0026#39;Server\u0026#39;) # 顯示伺服器狀態 退出 WLST exit() 參考資料 Using the WebLogic Scripting Tool wlst script to check the status of weblogic servers ","date":"2023-04-08T00:00:00Z","permalink":"https://chengjhan.github.io/p/%E5%88%A9%E7%94%A8-wlst-weblogic-scripting-tool-%E7%AE%A1%E7%90%86-weblogic-%E4%B8%8A/","title":"利用 WLST (WebLogic Scripting Tool) 管理 WebLogic (上)"},{"content":"Java 的 Maven 專案中想引用的 jar 檔因授權問題或公司內部自行開發而未存在於 Maven Central Repository，因此必須手動新增。\n本篇以新增 Oracle Database JDBC driver 為例來說明三種方法的實作。\n方法一：在 pom.xml 檔添加 \u0026lt;dependency\u0026gt; 引用本地 jar 檔路徑 於專案根目錄建立 lib 目錄，將 ojdbc8.jar 檔放入，並在 pom.xml 添加 \u0026lt;dependency\u0026gt;，如下：\n\u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.oracle.jdbc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ojdbc8\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;system\u0026lt;/scope\u0026gt; \u0026lt;systemPath\u0026gt;${basedir}/lib/ojdbc8.jar\u0026lt;/systemPath\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; 必須加入 \u0026lt;scope\u0026gt; 及 \u0026lt;systemPath\u0026gt; 標籤，其中 ${basedir} 變數為專案根目錄。\n\u0026lt;scope\u0026gt; 標籤為依賴的範圍，控制三個 classpath，有編譯 (compile)、測試 (test)、執行 (runtime)，設定值有 compile、test、provided、runtime、system。\ncompile：為預設值，對於編譯、測試、執行有效。 test：僅對於測試有效。 provided：對於編譯、測試有效。 runtime：對於測試、執行有效。 system：同 provided，對於編譯、測試有效，但必須搭配 \u0026lt;systemPath\u0026gt; 標籤指定本地 jar 檔路徑。 ― 许晓斌 著, Maven实战 這邊使用 system 為編譯及執行時有效，在部署至容器後因容器已提供所以無須使用，需再搭配 \u0026lt;systemPath\u0026gt; 標籤指定本地 jar 檔路徑。\n方法二：在 pom.xml 檔添加 \u0026lt;repositories\u0026gt; 引用專案 Repository 路徑 於專案根目錄建立 lib 目錄作為 Repository，並在 pom.xml 添加 \u0026lt;repositories\u0026gt;，如下：\n\u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;lib\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;lib\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;file:///${basedir}/lib\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; 在 pom.xml 加入 ojdbc8.jar 檔座標，並將依賴的 jar 檔依照座標建立目錄路徑。\n\u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.oracle.jdbc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ojdbc8\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; 如上座標則於 lib 下建立 com/oracle/jdbc/ojdbc8/1.0 目錄，並命名 jar 檔為 ojdbc8–1.0.jar。\n最後在相同路徑新增同檔名的 ojdbc8–1.0.pom，內容如下：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34; xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.oracle.jdbc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ojdbc8\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;description\u0026gt;POM was created from install:install-file\u0026lt;/description\u0026gt; \u0026lt;/project\u0026gt; 設定如下：\n設定後會在 Maven Local Repository 複製相同的 jar 檔。\n方法三：以 install:install-file 指令將 jar 檔安裝到 Maven Local Repository 若需在 pom.xml 添加依賴，必須以指令手動安裝此依賴的 Maven 座標，以將 jar 檔安裝在 Maven Local Repository。\n指令如下：\nmvn install:install-file -DgroupId=\u0026lt;group-id\u0026gt; -DartifactId=\u0026lt;artifact-id\u0026gt; -Dversion=\u0026lt;version\u0026gt; -Dpackaging=\u0026lt;packaging\u0026gt; -DgeneratePom=\u0026lt;true/false\u0026gt; (預設為 true) -Dfile=\u0026lt;path-to-file\u0026gt; 以 Oracle Database JDBC driver 為例：\nmvn install:install-file -DgroupId=com.oracle.jdbc -DartifactId=ojdbc8 -Dversion=1.0 -Dpackaging=jar -Dfile=C:\\Users\\chengjhan\\Desktop\\ojdbc8.jar 已安裝 ojdbc8.jar 檔於 Maven Local Repository。\n若使用 Eclipse，可利用介面執行。\n參考資料 How to add local jar files to a Maven project? Maven — 引用本地端的 jar 如何將私有的 JAR 檔加入到由 Apache Maven 管理的 Java 專案中 How to add local jar files to a Maven project? Guide to installing 3rd party JARs ","date":"2023-04-07T00:00:00Z","permalink":"https://chengjhan.github.io/p/%E5%9C%A8-maven-%E5%B0%88%E6%A1%88%E6%96%B0%E5%A2%9E%E7%A7%81%E6%9C%89%E7%9A%84-jar-%E6%AA%94/","title":"在 Maven 專案新增私有的 jar 檔"},{"content":"\n安裝 JDK 在安裝 Maven 之前必須先安裝 JDK (Java Development Kit)，本篇以安裝 JDK 1.8 為例，至 Oracle 官方網站下載並安裝。\n下載 64 位元的安裝版，依對話框安裝即可。\n安裝後必須新增環境變數：\n至「本機」\u0026gt; 右鍵「內容」\u0026gt;「進階系統設定」\u0026gt;「環境變數」\u0026gt;「新增系統變數」設定。\n變數名稱：JAVA_HOME。\n變數值：C:\\Program File\\Java\\jdk1.8.0_351 (預設安裝路徑)。\n編輯 Path 環境變數：\n新增 Path：\n在 Path 變數新增「%JAVA_HOME%\\bin」。\n確認安裝結果：\njava -version 安裝 Maven 至 Apache Maven 官方網站下載 Maven 解壓縮放置於欲放置的目錄，本篇放置於 D:\\ 目錄下。\n必須新增環境變數：\n至「本機」\u0026gt; 右鍵「內容」\u0026gt;「進階系統設定」\u0026gt;「環境變數」\u0026gt;「新增系統變數」。\n變數名稱：M2_HOME。\n變數值：D:\\apache-maven-3.8.1。\n新增 Path：\n在 Path 變數新增「%M2_HOME%\\bin」。\n確認安裝結果：\nmvn -v ","date":"2023-04-06T00:00:00Z","permalink":"https://chengjhan.github.io/p/%E5%9C%A8-windows-%E5%AE%89%E8%A3%9D-maven/","title":"在 Windows 安裝 Maven"}]