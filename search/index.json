[{"content":"\n上篇介紹了 WLST 命令列的基本用法，本篇將介紹使用 .py 檔的方式，將執行的命令寫成 .py 檔，利用遠端的方式更自動化地管理 WebLogic。\n啟動 Managed Server 編輯 .py 檔，檔名命名為 startManagedServer.py，放置於 \u0026lt;Oracle_Home\u0026gt;\\user_projects\\domains\\base_domain 下，檔案內容如下：\n1 2 3 connect(\u0026#39;weblogic\u0026#39;, \u0026#39;P@ssw0rd\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) # 連線 WLST start(\u0026#39;ManagedServer_1\u0026#39;, \u0026#39;Server\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) # 啟動 Managed Server exit() # 退出 WLST 可利用遠端電腦執行此檔案達成啟動 Managed Server，指令如下：\nWindows\n1 2 3 cd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain .\\bin\\setDomainEnv.cmd java weblogic.WLST startManagedServer.py 或單行命令：\n1 cd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain \u0026amp;\u0026amp; .\\bin\\setDomainEnv.cmd \u0026amp;\u0026amp; java weblogic.WLST startManagedServer.py 結果：\nLinux\n1 2 3 cd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin . ./setDomainEnv.sh java weblogic.WLST startManagedServer.py 或單行命令：\n1 cd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin \u0026amp;\u0026amp; . ./setDomainEnv.sh \u0026amp;\u0026amp; java weblogic.WLST startManagedServer.py 關閉 Managed Server 編輯 .py 檔，檔名命名為 stopManagedServer.py，放置於 \u0026lt;Oracle_Home\u0026gt;\\user_projects\\domains\\base_domain 下，檔案內容如下：\n1 2 3 connect(\u0026#39;weblogic\u0026#39;, \u0026#39;P@ssw0rd\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) # 連線 WLST shutdown(\u0026#39;ManagedServer_1\u0026#39;, \u0026#39;Server\u0026#39;, ignoreSessions=\u0026#39;true\u0026#39;, force=\u0026#39;true\u0026#39;) # 關閉 Managed Server exit() # 退出 WLST 可利用遠端電腦執行此檔案達成關閉 Managed Server，指令如下：\nWindows\n1 2 3 cd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain .\\bin\\setDomainEnv.cmd java weblogic.WLST stopManagedServer.py 或單行命令：\n1 cd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain \u0026amp;\u0026amp; .\\bin\\setDomainEnv.cmd \u0026amp;\u0026amp; java weblogic.WLST stopManagedServer.py 結果：\nLinux\n1 2 3 cd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin . ./setDomainEnv.sh java weblogic.WLST stopManagedServer.py 或單行命令：\n1 cd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin \u0026amp;\u0026amp; . ./setDomainEnv.sh \u0026amp;\u0026amp; java weblogic.WLST stopManagedServer.py 檢查伺服器狀態 編輯 .py 檔，檔名命名為 checkServersState.py，放置於 \u0026lt;Oracle_Home\u0026gt;\\user_projects\\domains\\base_domain 下，檔案內容如下：\n1 2 3 4 connect(\u0026#39;weblogic\u0026#39;, \u0026#39;P@ssw0rd\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) # 連線 WLST serverList = ls(\u0026#39;Servers\u0026#39;, returnMap=\u0026#39;true\u0026#39;) # 列出所有伺服器 for server in serverList: state(server, \u0026#39;Server\u0026#39;) # 顯示伺服器狀態 exit() # 退出 WLST 可利用遠端電腦執行此檔案達成檢查伺服器狀態，指令如下：\nWindows\n1 2 3 cd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain .\\bin\\setDomainEnv.cmd java weblogic.WLST checkServersState.py 或單行命令：\n1 cd /d D:\\Oracle\\Middleware\\Oracle_Home\\user_projects\\domains\\base_domain \u0026amp;\u0026amp; .\\bin\\setDomainEnv.cmd \u0026amp;\u0026amp; java weblogic.WLST checkServersState.py Linux\n1 2 3 cd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin . ./setDomainEnv.sh java weblogic.WLST checkServersState.py 或單行命令：\n1 cd /opt/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin \u0026amp;\u0026amp; . ./setDomainEnv.sh \u0026amp;\u0026amp; java weblogic.WLST checkServersState.py 參考資料 Error: Could not find or load main class weblogic.security.Encrypt Jython WLST using python threading module (Weblogic 10) ","date":"2023-04-09T00:00:00Z","permalink":"https://example.com/p/%E5%88%A9%E7%94%A8-wlst-weblogic-scripting-tool-%E7%AE%A1%E7%90%86-weblogic-%E4%B8%8B/","title":"利用 WLST (WebLogic Scripting Tool) 管理 WebLogic (下)"},{"content":"\nWLST 是一個命令列腳本介面 (command-line scripting interface)，可以透過 WLST 執行 WebLogic 的遠端管理。WLST 是基於 Jython (Java scripting interpreter) 的語法與執行環境。本篇將以 Windows 下的環境介紹基本的 WLST 操作方法。\n啟動 WLST 1 2 cd \u0026lt;Oracle_Home\u0026gt;\\oracle_common\\common\\bin .\\wlst.cmd 連線 WLST 利用 Jython 語法呼叫 connect() 方法，並將 WebLogic 管理員使用者帳號、密碼、Admin Console URL 代入作為參數。\n1 connect(\u0026#39;Username\u0026#39;, \u0026#39;Password\u0026#39;, \u0026#39;Admin Console URL\u0026#39;) 例如：\n1 connect(\u0026#39;weblogic\u0026#39;, \u0026#39;P@ssw0rd\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) 啟動 Managed Server 利用 Jython 語法呼叫 start() 方法，並將 Managed Server 的名稱、Admin Console URL 代入作為參數。\n1 start(\u0026#39;Managed Server Name\u0026#39;, \u0026#39;Server\u0026#39;, \u0026#39;Admin Console URL\u0026#39;) Info:\n第二個參數中，若為單一伺服器則為 Server；若為叢集伺服器則為 Cluster（叢集伺服器可不需 Admin Console URL 參數）。\n例如：\n1 start(\u0026#39;ManagedServer_1\u0026#39;, \u0026#39;Server\u0026#39;, \u0026#39;t3://localhost:7001\u0026#39;) 關閉 Managed Server 利用 Jython 語法呼叫 shutdown() 方法，並將 Managed Server 的名稱代入作為參數。\n1 shutdown(\u0026#39;Managed Server Name\u0026#39;, \u0026#39;Server\u0026#39;, ignoreSessions=\u0026#39;true\u0026#39;, force=\u0026#39;true\u0026#39;) Info:\n第二個參數中，若為單一伺服器則為 Server；若為叢集伺服器則為 Cluster。\n例如：\n1 shutdown(\u0026#39;ManagedServer_1\u0026#39;, \u0026#39;Server\u0026#39;, ignoreSessions=\u0026#39;true\u0026#39;, force=\u0026#39;true\u0026#39;) 檢查伺服器狀態 1 2 x = ls(\u0026#39;Servers\u0026#39;, returnMap=\u0026#39;true\u0026#39;) # 列出含有 Server 字串的伺服器 for i in x: state(i, \u0026#39;Server\u0026#39;) # 顯示伺服器狀態 退出 WLST 1 exit() 參考資料 Using the WebLogic Scripting Tool wlst script to check the status of weblogic servers ","date":"2023-04-08T00:00:00Z","permalink":"https://example.com/p/%E5%88%A9%E7%94%A8-wlst-weblogic-scripting-tool-%E7%AE%A1%E7%90%86-weblogic-%E4%B8%8A/","title":"利用 WLST (WebLogic Scripting Tool) 管理 WebLogic (上)"},{"content":"Java 的 Maven 專案中想引用的 jar 檔因授權問題或公司內部自行開發而未存在於 Maven central，因此必須手動新增。\n本篇以新增 Oracle Database JDBC driver 為例來說明三種方法的實作。\n方法一：在 pom.xml 檔添加 \u0026lt;dependency\u0026gt; 引用本地 jar 檔路徑 於專案根目錄建立 lib 目錄，將 ojdbc8.jar 檔放入，並在 pom.xml 添加 \u0026lt;dependency\u0026gt;，如下：\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.oracle.jdbc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ojdbc8\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;system\u0026lt;/scope\u0026gt; \u0026lt;systemPath\u0026gt;${basedir}/lib/ojdbc8.jar\u0026lt;/systemPath\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; 必須加入 \u0026lt;scope\u0026gt; 及 \u0026lt;systemPath\u0026gt; 標籤，其中 ${basedir} 變數為專案根目錄。\n\u0026lt;scope\u0026gt; 標籤為依賴的範圍，控制三個 classpath，有編譯 (compile)、測試 (test)、執行 (runtime)，設定值有 compile、test、provided、runtime、system。\ncompile：為預設值，對於編譯、測試、執行有效。 test：僅對於測試有效。 provided：對於編譯、測試有效。 runtime：對於測試、執行有效。 system：同 provided，對於編譯、測試有效，但必須搭配 \u0026lt;systemPath\u0026gt; 標籤指定本地 jar 檔路徑。 ― 许晓斌 著, Maven实战 這邊使用 system 為編譯及執行時有效，在部署至容器後因容器已提供所以無須使用，需再搭配 \u0026lt;systemPath\u0026gt; 標籤指定本地 jar 檔路徑。\n方法二：在 pom.xml 檔添加 \u0026lt;repositories\u0026gt; 引用本地 repository 路徑 於專案根目錄建立 lib 目錄作為 repository，並在 pom.xml 添加 \u0026lt;repositories\u0026gt;，如下：\n1 2 3 4 5 6 7 \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;lib\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;lib\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;file:///${basedir}/lib\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; 在 pom.xml 加入 ojdbc8.jar 檔座標，並將依賴的 jar 檔依照座標建立目錄路徑。\n1 2 3 4 5 6 7 8 9 \u0026lt;dependencies\u0026gt; ... \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.oracle.jdbc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ojdbc8\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;/dependencies\u0026gt; 如上座標則於 lib 下建立 com/oracle/jdbc/ojdbc8/1.0 目錄，並命名 jar 檔為 ojdbc8–1.0.jar。\n最後在相同路徑新增同檔名的 ojdbc8–1.0.pom，內容如下：\n1 2 3 4 5 6 7 8 9 10 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34; xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.oracle.jdbc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ojdbc8\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;description\u0026gt;POM was created from install:install-file\u0026lt;/description\u0026gt; \u0026lt;/project\u0026gt; 設定如下：\n設定後會在 Maven local repository 複製相同的 jar 檔。\n方法三：以 install:install-file 指令將 jar 檔安裝到 Maven local repository 若需在 pom.xml 添加依賴，必須以指令手動安裝此依賴的 Maven 座標，以將 jar 檔安裝在 Maven local repository。\n指令如下：\n1 2 3 4 5 6 7 mvn install:install-file -DgroupId=\u0026lt;group-id\u0026gt; -DartifactId=\u0026lt;artifact-id\u0026gt; -Dversion=\u0026lt;version\u0026gt; -Dpackaging=\u0026lt;packaging\u0026gt; -DgeneratePom=\u0026lt;true/false\u0026gt; (預設為 true) -Dfile=\u0026lt;path-to-file\u0026gt; 以 Oracle Database JDBC driver 為例：\n1 2 3 4 5 6 mvn install:install-file -DgroupId=com.oracle.jdbc -DartifactId=ojdbc8 -Dversion=1.0 -Dpackaging=jar -Dfile=C:\\Users\\chengjhan\\Desktop\\ojdbc8.jar 已安裝 ojdbc8.jar 檔於 Maven local repository。\n若使用 Eclipse，可利用介面執行。\n參考資料 How to add local jar files to a Maven project? Maven — 引用本地端的 jar 如何將私有的 JAR 檔加入到由 Apache Maven 管理的 Java 專案中 How to add local jar files to a Maven project? Guide to installing 3rd party JARs ","date":"2023-04-07T00:00:00Z","permalink":"https://example.com/p/%E5%9C%A8-maven-%E5%B0%88%E6%A1%88%E6%96%B0%E5%A2%9E%E7%A7%81%E6%9C%89%E7%9A%84-jar-%E6%AA%94/","title":"在 Maven 專案新增私有的 jar 檔"},{"content":"\n安裝 JDK 在安裝 Maven 之前必須先安裝 JDK (Java Development Kit)，本篇以安裝 JDK 1.8 為例，至 Oracle 官方網站下載並安裝。\n下載 64 位元的安裝版，依對話框安裝即可。\n安裝後必須新增環境變數：\n至「本機」\u0026gt; 右鍵「內容」\u0026gt;「進階系統設定」\u0026gt;「環境變數」\u0026gt;「新增系統變數」設定。\n變數名稱：JAVA_HOME。\n變數值：C:\\Program File\\Java\\jdk1.8.0_351 (預設安裝路徑)。\n編輯 Path 環境變數：\n新增 Path：\n在 Path 變數新增「%JAVA_HOME%\\bin」。\n確認安裝結果：\n1 java -version 安裝 Maven 至 Apache Maven 官方網站下載 Maven 解壓縮放置於欲放置的目錄，本篇放置於 D:\\ 目錄下。\n必須新增環境變數：\n至「本機」\u0026gt; 右鍵「內容」\u0026gt;「進階系統設定」\u0026gt;「環境變數」\u0026gt;「新增系統變數」。\n變數名稱：M2_HOME。\n變數值：D:\\apache-maven-3.8.1。\n新增 Path：\n在 Path 變數新增「%M2_HOME%\\bin」。\n確認安裝結果：\n1 mvn -v ","date":"2023-04-06T00:00:00Z","permalink":"https://example.com/p/%E5%9C%A8-windows-%E5%AE%89%E8%A3%9D-maven/","title":"在 Windows 安裝 Maven"}]